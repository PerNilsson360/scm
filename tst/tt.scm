(define hypoth '())
(define goal '())

(define (tagged-list? exp tag) (and (pair? exp) (eq? (car exp) tag)))
(define (impl? term) (and (tagged-list? term 'impl) (= (length term) 3)))
(define (hypothesis term) (set! hypoth (cons term hypoth)))
(define (theorem term) 
  (if (null? goal) 
      (set! goal (cons term goal))
      (error "Wrong command in proving mode")))

(define (reset) (set! hypoth '()) (set! goal '()))
(define (show) 
  (display 'hypothesis:) (display hypoth) (newline)
  (display '---------) (newline) (display 'goals:) (display goal) (newline))

(define (intro name) 
  (if (null? goal) 
      (error "There is no goal")
      (let ((i (car goal)))
	(if (impl? i)
	    (begin (set! hypoth (cons (cons name (cadr i)) hypoth))
		   (set! goal (cons (caddr i) (cdr goal))))
	    (error "goal is not an implication")))))