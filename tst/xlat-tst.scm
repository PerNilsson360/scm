;; (load "xlat-tst.scm")

(define (xlat-expect quoted-proc args expected)
  (let* ((translated (__internal-translate__ quoted-proc))
	 (proc (eval translated environment))
	 (result (apply proc args)))
    (if (not (equal? result expected))
	(error "XLAT-EXPECT: failure" quoted-proc translated result expected))))


(define (test-cond)
  (let ((p1 '(define (p1)
	       (cond ((> 3 2) 'greater)
		     ((< 3 2) 'less))))
	(p2 '(define (p2)
	       (cond ((> 3 3) 'greater)
		     ((< 3 3) 'less)
		     (else 'equal)))))
    (xlat-expect p1 '() 'greater)
    (xlat-expect p2 '() 'equal)
    ))

(define (test-case)
  (let ((p1 '(define (p1)
	       (case (* 2 3)
		 ((2 3 5 7) 'prime)
		 ((1 4 6 8 9) 'composite))))
	(p2 '(define (p2)
	       (case (car '(c d))
		 ((a e i o u) 'vowel)
		 ((w y) 'semivowel)
		 (else 'consonant)) 'consonant)))
    (xlat-expect p1 '() 'composite)
    (xlat-expect p2 '() 'consonant)))
    
(define (test)
  (test-cond)
  (test-case)
  )

(test)
