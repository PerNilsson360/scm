(load "/home/per/git/scm/tst/2d-geometry.scm")

(define window-width 640)
(define window-height 400)
(define ball-diameter 20)
(define pi 3.14159265359)
(define a90 (/ pi 2))
(define a180 pi)
(define a270 (* (/ 3 2) pi))
(define a360 (* 2 pi))
(define upper-screen-line (<line-2d> (<point-2d> 0 0) (<point-2d> window-width 0)))
(define lower-screen-line (<line-2d> (<point-2d> 0 window-height)
									 (<point-2d> window-width window-height)))
(define left-screen-line (<line-2d> (<point-2d> 0 0) (<point-2d> 0 window-height)))
(define right-screen-line (<line-2d> (<point-2d> window-width 0) (<point-2d> window-width window-height)))

(define (clear-screen)
  (gr-set-foreground 'white)
  (gr-move-to! 0 0)
  (gr-fill-rect window-width window-height))

(define (calc-move-x angle) (cos angle))
(define (calc-move-y angle) (sin angle))
(define (make-random-ball)
  (make-ball ball-diameter
			 (* (random) window-width)
			 (* (random) window-height)
			 (* (random) (* 2 pi))))

(define (make-ball diameter start-x start-y start-angle)
  (let ((x start-x)
		(y start-y)
		(d diameter)
		(angle start-angle)
		(move-x (calc-move-x start-angle))
		(move-y (calc-move-y start-angle)))
	(define (draw)
	  (gr-set-foreground 'blue)
	  (gr-move-to! x y) 
	  (gr-fill-arc d d 0 (* 360 64)))
	(define (set-angle! phi)
	  (set! angle (remainder phi a360))
	  (set! move-x (calc-move-x angle))
	  (set! move-y (calc-move-y angle)))
	(define (mirror-up phi)
	  (if (> phi a270)
		  (- a90 (- phi a270))
		  (+ a90 (- a270 phi))))
    (define (mirror-down phi)
      (if (> phi a90)
          (- a360 phi)
          (+ a270 phi)))
    (define (mirror-left phi)
      (if (< phi 180)
          (- a90 (- phi a90))
          (- (* a270 2) phi)))
    (define (mirror-right phi)
      (if (< phi 90)
          (- a180 phi)
          (+ phi a180)))
	(define (move)
	  (let ((new-x (+ x move-x))
			(new-y (+ y move-y)))
		(cond ((line-2d-inside-box upper-screen-line x y d d)
			   (set-angle! (mirror-up angle))
			   (set! x (+ x move-x)) (set! y (+ y move-y)))
		 	  ((line-2d-inside-box lower-screen-line x y d d)
			   (set-angle! (mirror-down angle))
			   (set! x (+ x move-x)) (set! y (+ y move-y)))
			  ((line-2d-inside-box left-screen-line x y d d)
               (set-angle! (mirror-left angle))
			   (set! x (+ x move-x)) (set! y (+ y move-y)))
		      ((line-2d-inside-box right-screen-line x y d d)
               (set-angle! (mirror-right angle))
			   (set! x (+ x move-x)) (set! y (+ y move-y)))
			  (else (set! x new-x) (set! y new-y)))))
	(lambda (message)
	  (match message
		(animate
		 (move)
		 (draw))
		(? (error "BALL: unkown message: " message))))))

(define (run)
  (let  ((running #t)
		 (ball (make-random-ball)))
	(define (handle-events n-events)
      (if (> n-events 0)
		  (let ((event (x-next-event)))
			(match event
			  ((key-press ?win ?x ?y ?state ?key ?str) 
		       (if (eq? key 'xk-Q)
				   (begin (print-line event) (set! running #f))
				   (begin (print-line event) (handle-events (dec n-events)))))
			  (? (begin (handle-events (dec n-events))))))))
	(let loop ()
	  (if running
		  (let ((n-events (x-events-queued)))
			(if (= n-events 0)
				(begin (clear-screen)
	  				   (ball 'animate)
					   (gr-swap-buffers)
					   (nano-sleep 0 2000000)
					   (loop))
				(begin (handle-events n-events) (loop))))))))

(gr-open `((width ,window-width)
		   (height ,window-height)
		   (window-name "bouncing ball")))
;(load "/home/per/git/scm/tst/bouncing-ball.scm")
;(run)				   
;(gr-close)
