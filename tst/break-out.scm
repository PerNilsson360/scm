(load "/home/per/git/scm/tst/2d-geometry.scm")
(load "/home/per/prg/c++/scheme/keysymdef.scm")
(load "/home/per/git/scm/rgb-colors.scm")

(define window-width 640)
(define window-height 400)
(define ball-diameter 20)

(define direction-p1 (<point-2d> (/ window-width 2) (/ window-height 2)))
(define direction-p2 (<point-2d> (/ window-width 2.5) (/ window-height 4)))
(define direction-v (point-2ds->vector direction-p1 direction-p2))

(define (mirror-up p1 p2 alpha)
  (display (list "mirror up p1" p1 "p2" p2  "alpha"alpha)) (newline)
  (let ((p1x (<point-2d>:x p1))
		(p2x (<point-2d>:x p2)))
	(if (< p2x p1x)
		(set! p1x (- p1x (* (- p1x p2x) 2)))
		(set! p1x (+ p2x (* (- p2x p1x) 2))))
	(let ((v (point-2ds->vector
			  p2
			  (<point-2d> p1x (<point-2d>:y p1)))))
	  (display (list "v" v)) (newline)
	  (set! direction-v v))))

(define (calc-p1y p1y p2y)
  (display (list "p1y" p1y "p2y" p2y)) (newline)
  (if (< p2y p1y)
	  (- p1y (* (- p1y p2y) 2))
	  (+ p1y (* (- p2y p1y) 2))))
  
(define (mirror-left p1 p2 alpha)
  (display (list "mirror left p1" p1 "p2" p2  "alpha"alpha)) (newline)
  (let ((v (point-2ds->vector
			p2
			(<point-2d> (<point-2d>:x p1)
						(calc-p1y (<point-2d>:y p1) (<point-2d>:y p2))))))
	(set! direction-v v)))

(define (inc-alpha alpha)
  (let ((result (+ alpha 3)))
	result))


(define (clip-point p) (make-cliped-point (<point-2d>:x p) (<point-2d>:y p)))

(define (make-cliped-point x y)
  (define (clip value max)
	(cond ((< value 0) 0)
		  ((> value max) max)
		  (else value)))
  (let ((result (<point-2d> (clip x window-width) (clip y window-height))))
	(display (list "make-cliped-point" x y result)) (newline)
	result))

(define (clear-screen)
  (gr-set-foreground white)
  (gr-move-to! 0 0)
  (gr-fill-rect window-width window-height))

(define (draw point color) 
  (gr-set-foreground color)
  (gr-move-to-point-2d! point) 
  (gr-fill-arc ball-diameter ball-diameter 0 (* 360 64)))

(define (make-ball)
  (let* ((origin direction-p1)
		 (alpha 0)
		 (current direction-p1))
	(define (collision-detection)
	  (let ((x (<point-2d>:x current))
			(y (<point-2d>:y current)))
		(cond ((<= y 0)
			   (mirror-up origin current alpha)
			   (set! alpha 0)
			   (set! origin current);(<point-2d> (<point-2d>:x current) 0))
			   (display (list "hit top origin" origin)) (newline)
			   )
			  ((>= y window-height)
			   (mirror-up origin current alpha)
			   (set! alpha 0)
			   (set! origin current) ;(<point-2d> (<point-2d>:x current) window-height))
			   (display (list "hit bottom origin" origin)) (newline)
			   )
			  
			  ((<= x 0)
			   (mirror-left origin current alpha)
			   (set! alpha 0)
			   (set! origin current) ;(<point-2d> 0 (<point-2d>:y current)))
			   (display (list "hit left origin" origin)) (newline)
			   )
			  ((>= x window-width)
			   (mirror-left origin current alpha)
			   (set! alpha 0)
			   (set! origin current) ;(<point-2d> window-width (<point-2d>:y current)))
			   (display (list "hit right origin" origin)) (newline)
			   )
			  ))
	  )
	(lambda (message)
	  (match message
		(animate
		 (set! alpha (inc-alpha alpha))
		 (set! current (move-point-2d origin direction-v alpha))
		 (display (list "current: " current)) (newline)
		 (collision-detection)
		 (draw current blue))
		(? (error "BALL: not a supported message" message))))))
		
(define (run)
  (let  ((running #t)
		 (ball (make-ball)))
	(define (handle-events n-events)
      (if (> n-events 0)
		  (let ((event (x-next-event)))
			(match event
			  ((key-press ?win ?x ?y ?state ?key ?str) 
		       (if (= key xk-Q)
				   (begin (print-line event) (set! running #f))
				   (begin (print-line event) (handle-events (dec n-events)))))
			  (? (begin (handle-events (dec n-events))))))))
	(let loop ()
	  (if running
		  (let ((n-events (x-events-queued)))
			(if (= n-events 0)
				(begin (clear-screen)
	  				   (ball 'animate)
					   (gr-swap-buffers)
					   (nano-sleep 0 20000000)
					   (loop))
				(begin (handle-events n-events) (loop))))))))

(gr-open `((width ,window-width)
		   (height ,window-height)
		   (window-name "break out man")))
;(load "/home/per/git/scm/tst/break-out.scm")
;(run)				   
;(gr-close)
